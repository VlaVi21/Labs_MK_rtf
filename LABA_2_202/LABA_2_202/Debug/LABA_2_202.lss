
LABA_2_202.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800060  00800060  00000428  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000458  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000760  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005f2  00000000  00000000  00000c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000540  00000000  00000000  0000122e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  00001770  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006ffc  00000000  00000000  000018bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002de  00000000  00000000  000088b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00008b96  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00000240  00000000  00000000  00008bce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	39 c0       	rjmp	.+114    	; 0x74 <__ctors_end>
   2:	00 00       	nop
   4:	aa c0       	rjmp	.+340    	; 0x15a <__vector_1>
   6:	00 00       	nop
   8:	e3 c0       	rjmp	.+454    	; 0x1d0 <__vector_2>
   a:	00 00       	nop
   c:	1f c1       	rjmp	.+574    	; 0x24c <__vector_3>
   e:	00 00       	nop
  10:	41 c0       	rjmp	.+130    	; 0x94 <__bad_interrupt>
  12:	00 00       	nop
  14:	3f c0       	rjmp	.+126    	; 0x94 <__bad_interrupt>
  16:	00 00       	nop
  18:	3d c0       	rjmp	.+122    	; 0x94 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3b c0       	rjmp	.+118    	; 0x94 <__bad_interrupt>
  1e:	00 00       	nop
  20:	39 c0       	rjmp	.+114    	; 0x94 <__bad_interrupt>
  22:	00 00       	nop
  24:	37 c0       	rjmp	.+110    	; 0x94 <__bad_interrupt>
  26:	00 00       	nop
  28:	35 c0       	rjmp	.+106    	; 0x94 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	33 c0       	rjmp	.+102    	; 0x94 <__bad_interrupt>
  2e:	00 00       	nop
  30:	31 c0       	rjmp	.+98     	; 0x94 <__bad_interrupt>
  32:	00 00       	nop
  34:	2f c0       	rjmp	.+94     	; 0x94 <__bad_interrupt>
  36:	00 00       	nop
  38:	2d c0       	rjmp	.+90     	; 0x94 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2b c0       	rjmp	.+86     	; 0x94 <__bad_interrupt>
  3e:	00 00       	nop
  40:	29 c0       	rjmp	.+82     	; 0x94 <__bad_interrupt>
  42:	00 00       	nop
  44:	27 c0       	rjmp	.+78     	; 0x94 <__bad_interrupt>
  46:	00 00       	nop
  48:	25 c0       	rjmp	.+74     	; 0x94 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	23 c0       	rjmp	.+70     	; 0x94 <__bad_interrupt>
  4e:	00 00       	nop
  50:	21 c0       	rjmp	.+66     	; 0x94 <__bad_interrupt>
  52:	00 00       	nop
  54:	57 00       	.word	0x0057	; ????
  56:	5a 00       	.word	0x005a	; ????
  58:	5d 00       	.word	0x005d	; ????
  5a:	60 00       	.word	0x0060	; ????
  5c:	63 00       	.word	0x0063	; ????
  5e:	66 00       	.word	0x0066	; ????
  60:	69 00       	.word	0x0069	; ????
  62:	6c 00       	.word	0x006c	; ????
  64:	6f 00       	.word	0x006f	; ????
  66:	72 00       	.word	0x0072	; ????
  68:	75 00       	.word	0x0075	; ????
  6a:	78 00       	.word	0x0078	; ????
  6c:	7b 00       	.word	0x007b	; ????
  6e:	7e 00       	.word	0x007e	; ????
  70:	81 00       	.word	0x0081	; ????
  72:	84 00       	.word	0x0084	; ????

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf e5       	ldi	r28, 0x5F	; 95
  7a:	d4 e0       	ldi	r29, 0x04	; 4
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_clear_bss>:
  80:	20 e0       	ldi	r18, 0x00	; 0
  82:	a0 e6       	ldi	r26, 0x60	; 96
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	01 c0       	rjmp	.+2      	; 0x8a <.do_clear_bss_start>

00000088 <.do_clear_bss_loop>:
  88:	1d 92       	st	X+, r1

0000008a <.do_clear_bss_start>:
  8a:	a1 37       	cpi	r26, 0x71	; 113
  8c:	b2 07       	cpc	r27, r18
  8e:	e1 f7       	brne	.-8      	; 0x88 <.do_clear_bss_loop>
  90:	69 d1       	rcall	.+722    	; 0x364 <main>
  92:	8e c1       	rjmp	.+796    	; 0x3b0 <_exit>

00000094 <__bad_interrupt>:
  94:	b5 cf       	rjmp	.-150    	; 0x0 <__vectors>

00000096 <dec2digit>:

volatile uint8_t btn1_held = 0; // Прапор — кнопка 1 ще не відпущена
volatile uint8_t btn2_held = 0; // Прапор — кнопка 2 ще не відпущена

void dec2digit(char dec) {
	switch(dec) { //це в нас набір значень щоб виводити цифри
  96:	08 2e       	mov	r0, r24
  98:	00 0c       	add	r0, r0
  9a:	99 0b       	sbc	r25, r25
  9c:	aa 0b       	sbc	r26, r26
  9e:	bb 0b       	sbc	r27, r27
  a0:	80 31       	cpi	r24, 0x10	; 16
  a2:	91 05       	cpc	r25, r1
  a4:	a0 f5       	brcc	.+104    	; 0x10e <dec2digit+0x78>
  a6:	fc 01       	movw	r30, r24
  a8:	e6 5d       	subi	r30, 0xD6	; 214
  aa:	ff 4f       	sbci	r31, 0xFF	; 255
  ac:	7b c1       	rjmp	.+758    	; 0x3a4 <__tablejump2__>
		case 0: PORTC = 0b01011111; break;
  ae:	8f e5       	ldi	r24, 0x5F	; 95
  b0:	85 bb       	out	0x15, r24	; 21
  b2:	08 95       	ret
		case 1: PORTC = 0b00000110; break;
  b4:	86 e0       	ldi	r24, 0x06	; 6
  b6:	85 bb       	out	0x15, r24	; 21
  b8:	08 95       	ret
		case 2: PORTC = 0b00111011; break;
  ba:	8b e3       	ldi	r24, 0x3B	; 59
  bc:	85 bb       	out	0x15, r24	; 21
  be:	08 95       	ret
		case 3: PORTC = 0b00101111; break;
  c0:	8f e2       	ldi	r24, 0x2F	; 47
  c2:	85 bb       	out	0x15, r24	; 21
  c4:	08 95       	ret
		case 4: PORTC = 0b01100110; break;
  c6:	86 e6       	ldi	r24, 0x66	; 102
  c8:	85 bb       	out	0x15, r24	; 21
  ca:	08 95       	ret
		case 5: PORTC = 0b01101101; break;
  cc:	8d e6       	ldi	r24, 0x6D	; 109
  ce:	85 bb       	out	0x15, r24	; 21
  d0:	08 95       	ret
		case 6: PORTC = 0b01111101; break;
  d2:	8d e7       	ldi	r24, 0x7D	; 125
  d4:	85 bb       	out	0x15, r24	; 21
  d6:	08 95       	ret
		case 7: PORTC = 0b00000111; break;
  d8:	87 e0       	ldi	r24, 0x07	; 7
  da:	85 bb       	out	0x15, r24	; 21
  dc:	08 95       	ret
		case 8: PORTC = 0b01111111; break;
  de:	8f e7       	ldi	r24, 0x7F	; 127
  e0:	85 bb       	out	0x15, r24	; 21
  e2:	08 95       	ret
		case 9: PORTC = 0b01101111; break;
  e4:	8f e6       	ldi	r24, 0x6F	; 111
  e6:	85 bb       	out	0x15, r24	; 21
  e8:	08 95       	ret
		case 0xA: PORTC = 0b01110111; break; //додав букви до 16 системи числення
  ea:	87 e7       	ldi	r24, 0x77	; 119
  ec:	85 bb       	out	0x15, r24	; 21
  ee:	08 95       	ret
		case 0xB: PORTC = 0b01111101; break; 
  f0:	8d e7       	ldi	r24, 0x7D	; 125
  f2:	85 bb       	out	0x15, r24	; 21
  f4:	08 95       	ret
		case 0xC: PORTC = 0b01011001; break; 
  f6:	89 e5       	ldi	r24, 0x59	; 89
  f8:	85 bb       	out	0x15, r24	; 21
  fa:	08 95       	ret
		case 0xD: PORTC = 0b00111110; break; 
  fc:	8e e3       	ldi	r24, 0x3E	; 62
  fe:	85 bb       	out	0x15, r24	; 21
 100:	08 95       	ret
		case 0xE: PORTC = 0b01111001; break; 
 102:	89 e7       	ldi	r24, 0x79	; 121
 104:	85 bb       	out	0x15, r24	; 21
 106:	08 95       	ret
		case 0xF: PORTC = 0b01110001; break; 
 108:	81 e7       	ldi	r24, 0x71	; 113
 10a:	85 bb       	out	0x15, r24	; 21
 10c:	08 95       	ret
		default: PORTC = 0b00000000; //одну чорточку проєбав
 10e:	15 ba       	out	0x15, r1	; 21
 110:	08 95       	ret

00000112 <display>:
	}
}

void display(int num) {
 112:	ef e6       	ldi	r30, 0x6F	; 111
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	47 e6       	ldi	r20, 0x67	; 103
 118:	50 e0       	ldi	r21, 0x00	; 0
 11a:	32 97       	sbiw	r30, 0x02	; 2
	for (int i = DIGITS - 1; i >= 0; i--) {
		array[i] = num % 16; //замість 10-16 система
 11c:	9c 01       	movw	r18, r24
 11e:	2f 70       	andi	r18, 0x0F	; 15
 120:	30 78       	andi	r19, 0x80	; 128
 122:	33 23       	and	r19, r19
 124:	34 f4       	brge	.+12     	; 0x132 <display+0x20>
 126:	21 50       	subi	r18, 0x01	; 1
 128:	31 09       	sbc	r19, r1
 12a:	20 6f       	ori	r18, 0xF0	; 240
 12c:	3f 6f       	ori	r19, 0xFF	; 255
 12e:	2f 5f       	subi	r18, 0xFF	; 255
 130:	3f 4f       	sbci	r19, 0xFF	; 255
 132:	31 83       	std	Z+1, r19	; 0x01
 134:	20 83       	st	Z, r18
		num /= 16; // замість 10-16-сист. числення
 136:	9c 01       	movw	r18, r24
 138:	99 23       	and	r25, r25
 13a:	14 f4       	brge	.+4      	; 0x140 <display+0x2e>
 13c:	21 5f       	subi	r18, 0xF1	; 241
 13e:	3f 4f       	sbci	r19, 0xFF	; 255
 140:	c9 01       	movw	r24, r18
 142:	95 95       	asr	r25
 144:	87 95       	ror	r24
 146:	95 95       	asr	r25
 148:	87 95       	ror	r24
 14a:	95 95       	asr	r25
 14c:	87 95       	ror	r24
 14e:	95 95       	asr	r25
 150:	87 95       	ror	r24
		default: PORTC = 0b00000000; //одну чорточку проєбав
	}
}

void display(int num) {
	for (int i = DIGITS - 1; i >= 0; i--) {
 152:	e4 17       	cp	r30, r20
 154:	f5 07       	cpc	r31, r21
 156:	09 f7       	brne	.-62     	; 0x11a <display+0x8>
		array[i] = num % 16; //замість 10-16 система
		num /= 16; // замість 10-16-сист. числення
	}
}
 158:	08 95       	ret

0000015a <__vector_1>:

ISR(INT0_vect) {  // Кнопка "вгору"
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	2f 93       	push	r18
 166:	3f 93       	push	r19
 168:	4f 93       	push	r20
 16a:	5f 93       	push	r21
 16c:	6f 93       	push	r22
 16e:	7f 93       	push	r23
 170:	8f 93       	push	r24
 172:	9f 93       	push	r25
 174:	af 93       	push	r26
 176:	bf 93       	push	r27
 178:	ef 93       	push	r30
 17a:	ff 93       	push	r31
	if (!btn1_held) {
 17c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <btn1_held>
 180:	81 11       	cpse	r24, r1
 182:	15 c0       	rjmp	.+42     	; 0x1ae <__vector_1+0x54>
		num++;
 184:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <num>
 188:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <num+0x1>
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <num+0x1>
 192:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <num>
		if (num > 0xFFFF) num = 0xFFFF; //0xFFFF - в десятковій 65535, це фактично максимум у системі числення (МОЖУ ЗРОБИТИ ЩОБ ТІЛЬКИ ДО 16 РАХУВАЛО)
 196:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <num>
 19a:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <num+0x1>
		display(num);
 19e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <num>
 1a2:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <num+0x1>
 1a6:	b5 df       	rcall	.-150    	; 0x112 <display>
		btn1_held = 1; // Встановити прапор — утримується
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <btn1_held>
	}
}
 1ae:	ff 91       	pop	r31
 1b0:	ef 91       	pop	r30
 1b2:	bf 91       	pop	r27
 1b4:	af 91       	pop	r26
 1b6:	9f 91       	pop	r25
 1b8:	8f 91       	pop	r24
 1ba:	7f 91       	pop	r23
 1bc:	6f 91       	pop	r22
 1be:	5f 91       	pop	r21
 1c0:	4f 91       	pop	r20
 1c2:	3f 91       	pop	r19
 1c4:	2f 91       	pop	r18
 1c6:	0f 90       	pop	r0
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	0f 90       	pop	r0
 1cc:	1f 90       	pop	r1
 1ce:	18 95       	reti

000001d0 <__vector_2>:

ISR(INT1_vect) {  // Кнопка "вниз"
 1d0:	1f 92       	push	r1
 1d2:	0f 92       	push	r0
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	0f 92       	push	r0
 1d8:	11 24       	eor	r1, r1
 1da:	2f 93       	push	r18
 1dc:	3f 93       	push	r19
 1de:	4f 93       	push	r20
 1e0:	5f 93       	push	r21
 1e2:	6f 93       	push	r22
 1e4:	7f 93       	push	r23
 1e6:	8f 93       	push	r24
 1e8:	9f 93       	push	r25
 1ea:	af 93       	push	r26
 1ec:	bf 93       	push	r27
 1ee:	ef 93       	push	r30
 1f0:	ff 93       	push	r31
	if (!btn2_held) {
 1f2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <btn2_held>
 1f6:	81 11       	cpse	r24, r1
 1f8:	18 c0       	rjmp	.+48     	; 0x22a <__vector_2+0x5a>
		if (num > 0) num--;
 1fa:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <num>
 1fe:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <num+0x1>
 202:	18 16       	cp	r1, r24
 204:	19 06       	cpc	r1, r25
 206:	4c f4       	brge	.+18     	; 0x21a <__vector_2+0x4a>
 208:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <num>
 20c:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <num+0x1>
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <num+0x1>
 216:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <num>
		display(num);
 21a:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <num>
 21e:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <num+0x1>
 222:	77 df       	rcall	.-274    	; 0x112 <display>
		btn2_held = 1; // Встановити прапор — утримується
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <btn2_held>
	}
}
 22a:	ff 91       	pop	r31
 22c:	ef 91       	pop	r30
 22e:	bf 91       	pop	r27
 230:	af 91       	pop	r26
 232:	9f 91       	pop	r25
 234:	8f 91       	pop	r24
 236:	7f 91       	pop	r23
 238:	6f 91       	pop	r22
 23a:	5f 91       	pop	r21
 23c:	4f 91       	pop	r20
 23e:	3f 91       	pop	r19
 240:	2f 91       	pop	r18
 242:	0f 90       	pop	r0
 244:	0f be       	out	0x3f, r0	; 63
 246:	0f 90       	pop	r0
 248:	1f 90       	pop	r1
 24a:	18 95       	reti

0000024c <__vector_3>:

ISR(TIMER2_COMP_vect) {
 24c:	1f 92       	push	r1
 24e:	0f 92       	push	r0
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	0f 92       	push	r0
 254:	11 24       	eor	r1, r1
 256:	2f 93       	push	r18
 258:	3f 93       	push	r19
 25a:	4f 93       	push	r20
 25c:	5f 93       	push	r21
 25e:	6f 93       	push	r22
 260:	7f 93       	push	r23
 262:	8f 93       	push	r24
 264:	9f 93       	push	r25
 266:	af 93       	push	r26
 268:	bf 93       	push	r27
 26a:	ef 93       	push	r30
 26c:	ff 93       	push	r31
	// Динамічна індикація
	PORTC = 0x00;
 26e:	15 ba       	out	0x15, r1	; 21
	PORTA = 0x00;
 270:	1b ba       	out	0x1b, r1	; 27
	dec2digit(array[digcnt]); // Завантаження цифри для поточного розряду
 272:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <digcnt>
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	ee 0f       	add	r30, r30
 27a:	ff 1f       	adc	r31, r31
 27c:	e9 59       	subi	r30, 0x99	; 153
 27e:	ff 4f       	sbci	r31, 0xFF	; 255
 280:	80 81       	ld	r24, Z
 282:	09 df       	rcall	.-494    	; 0x96 <dec2digit>
	PORTA |= (1 << (digcnt + DIGITS)); // Увімкнення відповідного індикатора
 284:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <digcnt>
 288:	3b b3       	in	r19, 0x1b	; 27
 28a:	2c 5f       	subi	r18, 0xFC	; 252
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	02 c0       	rjmp	.+4      	; 0x296 <__vector_3+0x4a>
 292:	88 0f       	add	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	2a 95       	dec	r18
 298:	e2 f7       	brpl	.-8      	; 0x292 <__vector_3+0x46>
 29a:	83 2b       	or	r24, r19
 29c:	8b bb       	out	0x1b, r24	; 27
	digcnt = (digcnt + 1) % DIGITS; // Перехід до наступного індикатора та Повернення до 0 після 3 (циклічно)
 29e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <digcnt>
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	01 96       	adiw	r24, 0x01	; 1
 2a6:	83 70       	andi	r24, 0x03	; 3
 2a8:	90 78       	andi	r25, 0x80	; 128
 2aa:	99 23       	and	r25, r25
 2ac:	24 f4       	brge	.+8      	; 0x2b6 <__vector_3+0x6a>
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	8c 6f       	ori	r24, 0xFC	; 252
 2b2:	9f 6f       	ori	r25, 0xFF	; 255
 2b4:	01 96       	adiw	r24, 0x01	; 1
 2b6:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <digcnt>

	// Перевірка довгого натискання (скидання)
	static uint16_t counter1 = 0;
	static uint16_t counter2 = 0;

	if (PIND & BUT1) { // Кнопка 1: якщо тримається, лічильник росте
 2ba:	82 9b       	sbis	0x10, 2	; 16
 2bc:	1a c0       	rjmp	.+52     	; 0x2f2 <__vector_3+0xa6>
		counter1++;
 2be:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <counter1.1775>
 2c2:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <counter1.1775+0x1>
 2c6:	01 96       	adiw	r24, 0x01	; 1
 2c8:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <counter1.1775+0x1>
 2cc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <counter1.1775>
		if (counter1 >= LONG_PRESS) {
 2d0:	88 3c       	cpi	r24, 0xC8	; 200
 2d2:	91 05       	cpc	r25, r1
 2d4:	a0 f0       	brcs	.+40     	; 0x2fe <__vector_3+0xb2>
			num = 0; // Обнулення
 2d6:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <num+0x1>
 2da:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <num>
			display(num);  // Оновити дисплей
 2de:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <num>
 2e2:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <num+0x1>
 2e6:	15 df       	rcall	.-470    	; 0x112 <display>
			counter1 = 0;
 2e8:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <counter1.1775+0x1>
 2ec:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <counter1.1775>
 2f0:	06 c0       	rjmp	.+12     	; 0x2fe <__vector_3+0xb2>
		}
		} else {
		counter1 = 0; // Якщо відпустили — скидання
 2f2:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <counter1.1775+0x1>
 2f6:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <counter1.1775>
		btn1_held = 0; // Дозволити наступне натискання
 2fa:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <btn1_held>
	}

	if (PIND & BUT2) {
 2fe:	83 9b       	sbis	0x10, 3	; 16
 300:	1a c0       	rjmp	.+52     	; 0x336 <__vector_3+0xea>
		counter2++;
 302:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 306:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 30a:	01 96       	adiw	r24, 0x01	; 1
 30c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 310:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		if (counter2 >= LONG_PRESS) {
 314:	88 3c       	cpi	r24, 0xC8	; 200
 316:	91 05       	cpc	r25, r1
 318:	a0 f0       	brcs	.+40     	; 0x342 <__vector_3+0xf6>
			num = 0;
 31a:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <num+0x1>
 31e:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <num>
			display(num);
 322:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <num>
 326:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <num+0x1>
 32a:	f3 de       	rcall	.-538    	; 0x112 <display>
			counter2 = 0;
 32c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 330:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 334:	06 c0       	rjmp	.+12     	; 0x342 <__vector_3+0xf6>
		}
		} else {
		counter2 = 0;
 336:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 33a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		btn2_held = 0;
 33e:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <btn2_held>
	}
}
 342:	ff 91       	pop	r31
 344:	ef 91       	pop	r30
 346:	bf 91       	pop	r27
 348:	af 91       	pop	r26
 34a:	9f 91       	pop	r25
 34c:	8f 91       	pop	r24
 34e:	7f 91       	pop	r23
 350:	6f 91       	pop	r22
 352:	5f 91       	pop	r21
 354:	4f 91       	pop	r20
 356:	3f 91       	pop	r19
 358:	2f 91       	pop	r18
 35a:	0f 90       	pop	r0
 35c:	0f be       	out	0x3f, r0	; 63
 35e:	0f 90       	pop	r0
 360:	1f 90       	pop	r1
 362:	18 95       	reti

00000364 <main>:

int main(void) {
	display(num);
 364:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <num>
 368:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <num+0x1>
 36c:	d2 de       	rcall	.-604    	; 0x112 <display>

	// Налаштування портів
	DDRD &= ~(BUT1 | BUT2); // PD2, PD3 як вхід
 36e:	81 b3       	in	r24, 0x11	; 17
 370:	83 7f       	andi	r24, 0xF3	; 243
 372:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xFF;            // PORTC — сегменти (вихід)
 374:	8f ef       	ldi	r24, 0xFF	; 255
 376:	84 bb       	out	0x14, r24	; 20
	DDRA = 0xF0;            // PORTA [4..7] — позиції (вихід)
 378:	80 ef       	ldi	r24, 0xF0	; 240
 37a:	8a bb       	out	0x1a, r24	; 26

	PORTC = 0x00;
 37c:	15 ba       	out	0x15, r1	; 21
	PORTA = 0xF0;
 37e:	8b bb       	out	0x1b, r24	; 27

	/*Налаштування зовнішніх переривань*/
	/*Даташин - External Interrupts(1 1 - зрост. фронт)*/
	MCUCR |= (1 << ISC00) | (1 << ISC01); // переривання на зростаючому фронті сигналу (тобто, коли кнопка натиснута й сигнал переходить із LOW до HIGH).
 380:	85 b7       	in	r24, 0x35	; 53
 382:	83 60       	ori	r24, 0x03	; 3
 384:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1 << ISC10) | (1 << ISC11);
 386:	85 b7       	in	r24, 0x35	; 53
 388:	8c 60       	ori	r24, 0x0C	; 12
 38a:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0) | (1 << INT1); //вмикаємо самі переривання1
 38c:	8b b7       	in	r24, 0x3b	; 59
 38e:	80 6c       	ori	r24, 0xC0	; 192
 390:	8b bf       	out	0x3b, r24	; 59

	/*==============================================*/
	TCCR2 = (1 << WGM21) | (1 << CS22) | (1 << CS21); //налаштування таймера 2 (даташит)
 392:	8e e0       	ldi	r24, 0x0E	; 14
 394:	85 bd       	out	0x25, r24	; 37
	//режим CTC (обнул. при збігу з OCR2)
	//вибір такотової частоти (СS22 та CS21)
	
	OCR2 = 12; //Значення, з яким порівнюється таймер (інтервал між перериваннями)
 396:	8c e0       	ldi	r24, 0x0C	; 12
 398:	83 bd       	out	0x23, r24	; 35
	// f=40*4=160 Гц => 1/160 = 0.00625 с => 0,00625 * (1*10^6/256)-1= 23,4 = 23 - 
	//4 - розряди, 40 - задана частота, далі часовий інтервал, та саме значення регістру порівняння
	
	TIMSK |= (1 << OCIE2); //Вмикає переривання по збігу таймера 2 з OCR2
 39a:	89 b7       	in	r24, 0x39	; 57
 39c:	80 68       	ori	r24, 0x80	; 128
 39e:	89 bf       	out	0x39, r24	; 57
	
	//F_CPU = 8 МГц, частота дільника 256
	/*==============================================*/
	

	sei();  // Глобальне увімкнення переривань
 3a0:	78 94       	sei
 3a2:	ff cf       	rjmp	.-2      	; 0x3a2 <main+0x3e>

000003a4 <__tablejump2__>:
 3a4:	ee 0f       	add	r30, r30
 3a6:	ff 1f       	adc	r31, r31
 3a8:	05 90       	lpm	r0, Z+
 3aa:	f4 91       	lpm	r31, Z
 3ac:	e0 2d       	mov	r30, r0
 3ae:	09 94       	ijmp

000003b0 <_exit>:
 3b0:	f8 94       	cli

000003b2 <__stop_program>:
 3b2:	ff cf       	rjmp	.-2      	; 0x3b2 <__stop_program>
